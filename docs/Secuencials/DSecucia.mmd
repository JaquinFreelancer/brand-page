sequenceDiagram
    %% Comentarios:
    %% - Diagramas de secuencia principales del sistema web institucional
    %% - Incluye flujos cr칤ticos: autenticaci칩n, gesti칩n de contenido, contacto, blog
    %% - Muestra interacciones entre Frontend, Backend, Base de Datos y servicios externos
    %% - Considera validaciones, seguridad y notificaciones

    participant V as Visitante
    participant F as Frontend
    participant A as API Backend
    participant S as Security Layer
    participant DB as Database
    participant E as Email Service
    participant C as Captcha Service

    %% === DIAGRAMA 1: AUTENTICACI칍N DE USUARIO ===
    Note over V,C: 游댏 Flujo de Autenticaci칩n de Usuario

    V->>F: 1. Accede a /login
    F->>V: 2. Muestra formulario de login
    V->>F: 3. Env칤a credenciales (email, password)
    F->>A: 4. POST /api/auth/login
    A->>S: 5. Valida datos de entrada
    S->>DB: 6. Consulta usuario por email
    DB->>S: 7. Retorna datos del usuario
    S->>S: 8. Verifica password hash (bcrypt)
    
    alt Credenciales v치lidas
        S->>A: 9. Genera JWT token
        A->>DB: 10. Crea sesi칩n en USER_SESSIONS
        DB->>A: 11. Confirma creaci칩n de sesi칩n
        A->>F: 12. Retorna token JWT + datos usuario
        F->>F: 13. Almacena token en localStorage
        F->>V: 14. Redirige a dashboard/perfil
    else Credenciales inv치lidas
        S->>A: 9. Error de autenticaci칩n
        A->>F: 10. Retorna error 401
        F->>V: 11. Muestra mensaje de error
    end

    %% === DIAGRAMA 2: ENV칈O DE FORMULARIO DE CONTACTO ===
    Note over V,C: 游닎 Flujo de Formulario de Contacto

    V->>F: 1. Accede a /contacto
    F->>V: 2. Muestra formulario
    V->>C: 3. Resuelve CAPTCHA
    C->>V: 4. Token de verificaci칩n
    V->>F: 5. Completa y env칤a formulario
    F->>A: 6. POST /api/contact (con token CAPTCHA)
    A->>C: 7. Verifica token CAPTCHA
    C->>A: 8. Confirma validez
    A->>S: 9. Valida y sanitiza datos
    
    alt Datos v치lidos
        S->>DB: 10. Inserta en CONTACT_FORMS
        DB->>S: 11. Confirma inserci칩n
        S->>E: 12. Env칤a notificaci칩n por email
        E->>S: 13. Confirma env칤o
        S->>A: 14. 칄xito
        A->>F: 15. Respuesta 200 OK
        F->>V: 16. Mensaje de confirmaci칩n
    else Datos inv치lidos o CAPTCHA falla
        S->>A: 10. Error de validaci칩n
        A->>F: 11. Retorna error 400
        F->>V: 12. Muestra errores espec칤ficos
    end

    %% === DIAGRAMA 3: CREACI칍N DE POST DE BLOG ===
    Note over V,C: 游닇 Flujo de Creaci칩n de Post de Blog (Admin/Editor)

    participant U as Usuario Admin/Editor

    U->>F: 1. Accede a /admin/blog/nuevo
    F->>A: 2. GET /api/auth/me (verificar sesi칩n)
    A->>S: 3. Valida JWT token
    S->>DB: 4. Consulta datos de usuario
    DB->>S: 5. Retorna usuario y rol
    
    alt Usuario autorizado (ADMIN/EDITOR)
        S->>A: 6. Usuario v치lido
        A->>F: 7. Retorna datos usuario
        F->>A: 8. GET /api/blog/categories (cargar categor칤as)
        A->>DB: 9. Consulta BLOG_CATEGORIES
        DB->>A: 10. Retorna categor칤as activas
        A->>F: 11. Lista de categor칤as
        F->>U: 12. Muestra formulario de creaci칩n
        
        U->>F: 13. Completa y env칤a post
        F->>A: 14. POST /api/blog
        A->>S: 15. Valida datos y permisos
        S->>DB: 16. Inserta en BLOG_POSTS
        DB->>S: 17. Retorna ID del post creado
        S->>DB: 18. Inserta tags en BLOG_POST_TAGS
        DB->>S: 19. Confirma inserci칩n de tags
        S->>A: 20. Post creado exitosamente
        A->>F: 21. Respuesta 201 Created
        F->>U: 22. Mensaje de 칠xito + redirecci칩n
    else Usuario no autorizado
        S->>A: 6. Error de autorizaci칩n
        A->>F: 7. Retorna error 403
        F->>U: 8. Redirige a /login
    end

    %% === DIAGRAMA 4: COMENTARIO EN BLOG POST ===
    Note over V,C: 游눫 Flujo de Comentario en Blog Post

    V->>F: 1. Accede a /blog/post-slug
    F->>A: 2. GET /api/blog/post-slug
    A->>DB: 3. Consulta BLOG_POSTS + comentarios aprobados
    DB->>A: 4. Retorna post y comentarios
    A->>F: 5. Datos del post
    F->>V: 6. Muestra post y formulario de comentarios
    
    V->>C: 7. Resuelve CAPTCHA
    C->>V: 8. Token de verificaci칩n
    V->>F: 9. Env칤a comentario
    F->>A: 10. POST /api/blog/post-slug/comments
    A->>C: 11. Verifica CAPTCHA
    C->>A: 12. Token v치lido
    A->>S: 13. Valida y sanitiza contenido
    
    alt Comentario v치lido
        S->>DB: 14. Inserta en BLOG_COMMENTS (status: PENDING)
        DB->>S: 15. Confirma inserci칩n
        S->>E: 16. Notifica a moderadores
        E->>S: 17. Email enviado
        S->>A: 18. Comentario enviado
        A->>F: 19. Respuesta 201 Created
        F->>V: 20. Mensaje "Comentario pendiente de moderaci칩n"
    else Comentario inv치lido
        S->>A: 14. Error de validaci칩n
        A->>F: 15. Retorna error 400
        F->>V: 16. Muestra errores
    end

    %% === DIAGRAMA 5: RECUPERACI칍N DE CONTRASE칌A ===
    Note over V,C: 游댐 Flujo de Recuperaci칩n de Contrase침a

    V->>F: 1. Accede a /recuperar-password
    F->>V: 2. Muestra formulario
    V->>F: 3. Env칤a email
    F->>A: 4. POST /api/auth/password-reset
    A->>S: 5. Valida formato de email
    S->>DB: 6. Busca usuario por email
    
    alt Usuario existe
        DB->>S: 7. Usuario encontrado
        S->>S: 8. Genera token 칰nico
        S->>DB: 9. Inserta en PASSWORD_RESETS
        DB->>S: 10. Token guardado
        S->>E: 11. Env칤a email con enlace de reset
        E->>S: 12. Email enviado
        S->>A: 13. Reset iniciado
        A->>F: 14. Respuesta 200 OK
        F->>V: 15. "Revisa tu email"
        
        Note over V,E: Usuario recibe email y hace click en enlace
        
        V->>F: 16. Accede a /restablecer-password/token
        F->>A: 17. GET /api/auth/password-reset/verify-token
        A->>DB: 18. Valida token en PASSWORD_RESETS
        DB->>A: 19. Token v치lido y no expirado
        A->>F: 20. Token v치lido
        F->>V: 21. Muestra formulario nueva contrase침a
        
        V->>F: 22. Env칤a nueva contrase침a
        F->>A: 23. POST /api/auth/password-reset/confirm
        A->>S: 24. Valida contrase침a y token
        S->>DB: 25. Actualiza password_hash en USERS
        DB->>S: 26. Contrase침a actualizada
        S->>DB: 27. Elimina token usado
        DB->>S: 28. Token eliminado
        S->>A: 29. Reset completado
        A->>F: 30. Respuesta 200 OK
        F->>V: 31. "Contrase침a actualizada" + redirige a login
    else Usuario no existe
        DB->>S: 7. Usuario no encontrado
        S->>A: 8. Simula respuesta exitosa (seguridad)
        A->>F: 9. Respuesta 200 OK
        F->>V: 10. "Revisa tu email" (sin revelar si existe)
    end